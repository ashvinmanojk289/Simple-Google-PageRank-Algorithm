# -*- coding: utf-8 -*-
"""ADSA project .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QPAcBCq9_TOY-RyfiO5LptmZ4ntrQWSB
"""

# Install required libraries (if not already installed)
!pip install numpy networkx matplotlib

# Import necessary libraries
import numpy as np
import networkx as nx
import matplotlib.pyplot as plt

# Function to initialize the graph
def initialize_graph():
    """
    Create a sample directed graph.
    Returns:
        adjacency_matrix: Numpy array representing the adjacency matrix.
        graph: NetworkX graph object for visualization.
    """
    edges = [
        (0, 1), (0, 2),
        (1, 2),
        (2, 0),
        (3, 2)
    ]
    G = nx.DiGraph()
    G.add_edges_from(edges)
    adjacency_matrix = nx.to_numpy_array(G)
    return adjacency_matrix, G

# Function to compute PageRank
def compute_pagerank(adjacency_matrix, damping_factor=0.85, max_iter=100, tol=1e-6):
    """
    Computes the PageRank scores for nodes in a graph.
    Args:
        adjacency_matrix: Numpy array representing the graph.
        damping_factor: Probability of continuing to a linked page.
        max_iter: Maximum number of iterations.
        tol: Tolerance for convergence.
    Returns:
        ranks: Numpy array of PageRank scores.
    """
    n = adjacency_matrix.shape[0]
    # Normalize adjacency matrix to create a transition matrix
    out_degree = adjacency_matrix.sum(axis=1)
    transition_matrix = np.divide(adjacency_matrix.T, out_degree, where=out_degree != 0)
    transition_matrix[:, out_degree == 0] = 1 / n  # Handle dangling nodes

    # Initialize ranks equally
    ranks = np.ones(n) / n

    for i in range(max_iter):
        new_ranks = (1 - damping_factor) / n + damping_factor * np.dot(transition_matrix, ranks)
        if np.linalg.norm(new_ranks - ranks, 1) < tol:  # Check for convergence
            break
        ranks = new_ranks
    return ranks

# Function to visualize the graph
def visualize_graph(graph, ranks):
    """
    Visualize the graph with node sizes proportional to PageRank scores.
    Args:
        graph: NetworkX graph object.
        ranks: PageRank scores for nodes.
    """
    plt.figure(figsize=(8, 6))
    node_sizes = [5000 * rank for rank in ranks]  # Scale ranks for visualization
    pos = nx.spring_layout(graph)
    nx.draw(
        graph, pos, with_labels=True, node_size=node_sizes,
        node_color='skyblue', edge_color='gray', font_weight='bold'
    )
    plt.title("Graph Visualization with PageRank Scores")
    plt.show()

# Main execution
if __name__ == "__main__":
    # Step 1: Initialize the graph
    adjacency_matrix, graph = initialize_graph()

    # Step 2: Compute PageRank scores
    ranks = compute_pagerank(adjacency_matrix, damping_factor=0.85)

    # Step 3: Display results
    print("PageRank Scores:")
    for node, rank in enumerate(ranks):
        print(f"Node {node}: {rank:.4f}")

    # Step 4: Visualize the graph
    visualize_graph(graph, ranks)